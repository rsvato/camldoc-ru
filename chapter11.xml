<?xml version="1.0" encoding="windows-1251"?>
<!DOCTYPE chapter SYSTEM "./core.dtd">
<chapter name="Компиляция во внутренний код (ocamlopt)" number="11">
  <abstract>
    <para>
      В этой главе описывается высокопроизводительный компилятор
      внутреннего кода Objective Caml <command>ocamlopt</command>,
      который компилирует исходные тексты Caml в объектные файлы с
      внутренним кодом и компонует последние в самостоятельные
      исполняемые файлы.</para>
    <para>Этот компилятор доступен не на всех платформах. Генерируемый
      им код работает быстрее байткода, создаваемого
      <command>ocamlc</command>, однако возрастает как время
      компиляции, так и размер исполняемых файлов. Тем не менее,
      совместимость с байткодом исключительно выскока: один и тот же
      код работает одинаково вне зависимости от того, скомпилирован он
      <command>ocamlc</command> или
      <command>ocamlopt</command>.</para>
    <para>Файлы с внутренним кодом нельзя смешивать с файлами с
      байкодом: программа должна быть скомилирована целиком либо
      <command>ocamlc</command>, либо <command>ocamlopt</command>.
      Объектные файлы с внутренним кодом, кроме того, не могут
      загружаться в интерактивную систему
      <command>ocaml</command>.</para>
  </abstract>
  <main-matters>
    <section name="Обзор компилятора">
      <para><command>ocamlopt</command> имеет интерфейс командной
	строки, весьма схожий с <command>ocamlc</command>. Компилятор
	принимает те же типы аргументов: </para>
      <list>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.mli</command>
	    считаются исходными файлами для интерфейсов единиц
	    компиляции. В интерфейсах указываются имена,
	    экспортируемые единицами компиляции: там объявлены имена
	    переменных и их типы, определены типы данных, объявлены
	    абстрактные типы данных, и т.д. Из файла
	    <command>X.mli</command> компилятор
	    <command>ocamlopt</command> создаст файл
	    <command>X.cmi</command> со скомпилированным интерфейсом.
	    Результат идентичен файлу, создаваемому
	    <command>ocamlc</command>.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.ml</command>
	    считаются исходными файлами для реализаций единиц
	    компиляции. Реализации содержат определения для имен,
	    экспортируемых единицей, а также выражения, вычисляемые на
	    предмет их сторонних эффектов. Из файла
	    <command>X.ml</command> компилятор
	    <command>ocamlopt</command> создает два файла -
	    <command>X.o</command>. с внутренним кодом и
	    <command>X.cmx</command> с дополнительной информацией для
	    компоновки и оптимизации клиентов единицы. На
	    компилированную реализацию всегда следует ссылаться по
	    имени <command>X.cmx</command>
	    (<command>ocamlopt</command>, считает что любой файл
	    <command>.o</command> скомпилирован из кода на языке С, а
	    не Caml).</para>
	  <para>Реализация сверяется с интерфейсом
	    <command>X.mli</command> (если он существует), как описано
	    в документации <command>ocamlc</command> (гл. 8).</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.cmx</command>
	    считаются скомпилированным объектным кодом. Они
	    компонуются с объектными файлы, полученными при компиляции
	    аргументов <command>.ml</command>, и стандартной
	    библиотекой Caml, давая в результате исполняемую программу
	    во внутреннем коде.  Порядок следования в командной строке
	    аргументов <command>.cmx</command> и
	    <command>.ml</command> важен: во время исполнения единицы
	    компиляции инициализируются в том же порядке, так что во
	    время компоновки ошибкой будет использовать компонент
	    единицы до ее инициализации. Поэтому файл
	    <command>X.cmx</command> должен стоять в командной строке
	    компилятора прежде любых файлов <command>.cmx</command>,
	    ссылающихся на единицу <command>X</command>.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.cmxa</command>
	    считаются библиотеками объектного кода. Такая библиотека в
	    двух файлах (<command>lib.cmxa</command> и
	    <command>lib.a</command>) содержит набор объектных файлов
	    (<command>.cmx/.o</command>). Она создается командой
	    <command>ocamlopt -a</command> (см. описание опций ниже).
	    Объектные файлы в библиотеке компонуются как обычные файлы
	    <command>.cmx</command> в том же порядке, в каком строился
	    файл <command>.cma</command>. Единственное различие
	    состоитв том, что, если в программе нет ссылок на какой-то
	    объектный файл в библиотеке, то он и не компонуется с
	    программой.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.c</command>,
	    передаются комплятору С, который генерирует объектный файл
	    <command>.o</command>. Затем этот файл компонуется с
	    программой.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.o</command>,
	    <command>.a</command> или <command>.so</command>
	    (<command>.obj</command>, <command>.lib</command> и
	    <command>.dll</command> под Windows) считаются объекнтыми
	    файлами и библиотеками С. Они компонуются с
	    программой.</para>
	</item>
      </list>
      <para>Результатом стадии компоновки является обычный исполняемый
	файл. Для запуска ему не нужна
	<command>ocamlrun</command>.</para>
    </section>
    <section name="Параметры">
      <para><command>ocamlc</command> разпознает следующие параметры
      командной строки:</para>
      <command-option-group>
	<command-option>
	  <c-option>
	    <mc-option>-a</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Строит библиотеку (файл <command>.cmx/.a</command>)
	      из объектных файлов (<command>.cmx/.o</command>),
	      перечисленных в командной строке, не компонуя их в
	      исполняемый файл. Имя библиотеки задается параметром
	      <command>-o</command>. По умолчанию используется
	      <command>library.cmxa</command>.</para>
	    <para>Если в командной строке присутствуют параметры
	      <command>-cclib</command> или <command>-ccopt</command>,
	      они также сохраняются в библиотеке, а затем при
	      автоматически добавляются к командам при компоновке,
	      если только не задан параметр
	      <command>-noautolink</command>.</para>
	  </option-description>
	</command-option>
      </command-option-group>
    </section>
  </main-matters>
</chapter>