<?xml version="1.0" encoding="windows-1251"?>
<!-- <!DOCTYPE chapter SYSTEM "./core.dtd"> -->
<chapter name="Пакетная компиляция (ocamlc)" number="8">
  <abstract>
    <para>В этой главе описывается пакетный компилятор языка Objective
    Caml <command>ocamlc</command>, который компилирует файлы с
    исходными текстами на языке Caml в объектные файлы с байткодом и
    компонует их, создавая самостоятельные исполняемые файлы с
    байткодом. Затем такие файлы запускаются интерпретатором байткода
    <command>ocamlrun</command>.</para>
  </abstract>
  <main-matters>
    <section name="Обзор компилятора">
      <para>По интерфейсу командной строки <command>ocamlc</command>
      похож на большинство компиляторов C. Он принимает несколько
      типов аргументов:</para>
      <list>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.mli</command>
	  считаются исходными файлами для интерфейсов единиц
	  компиляции. В интерфейсах указываются имена, экспортируемые
	  единицами компиляции: там объявлены имена переменных и их
	  типы, определены типы данных, объявлены абстрактные типы
	  данных, и т.д. Из файла <command>X.mli</command> компилятор
	  <command>ocamlc</command> создаст файл
	  <command>X.cmi</command> со скомпилированным
	  интерфейсом</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.ml</command>
	  считаются исходными файлами для реализаций единиц
	  компиляции. Реализации содержат определения для имен,
	  экспортируемых единицей, а также выражения, вычисляемые на
	  предмет их сторонних эффектов. Из файла
	  <command>X.ml</command> компилятор <command>ocamlc</command>
	  создает объект с байткодом в файле
	  <command>X.cmo</command>.</para> <para>Если существует
	  интерфейс <command>X.mli</command>, реализация
	  <command>X.ml</command> сверяется с соотвествующим
	  скомпилированным интерфейсом <command>X.cmi</command>,
	  который уже считается существующим. Если файла
	  <command>X.mli</command> не найдено, при компиляции
	  <command>X.ml</command> создается также компилированный
	  интерфейс <command>X.cmi</command>, экспортирующий все, что
	  определено в реализации <command>X.ml</command>.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.cmo</command>,
	  считаются скомпилированными объектами с байткодом. Они
	  компонуются c объектными файлами, полученными в
	  результате компиляции файлов <command>.ml</command> (если
	  такие есть) и стандартной библиотекой Objective Caml. В
	  результате создается самостоятельная исполняемая
	  программа. Порядок следования в командной строке аргументов
	  <command>.cmo</command> и <command>.ml</command> важен: во
	  время исполнения единицы компиляции инициализируются в том
	  же порядке, так что во время компоновки ошибкой будет
	  использовать компонент единицы до ее инициализации. Поэтому
	  файл <command>X.cmo</command> должен стоять в командной
	  строке компилятора прежде любых файлов
	  <command>.cmo</command>, ссылающихся на единицу
	  <command>X</command>.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.cma</command>,
	  считаются библиотеками библиотеками объектов с
	  байткодом. Библиотека содержит в одом файле набор файлов,
	  компилированных в байткод (файлов
	  <command>.cmo</command>). Она создается командой
	  <command>ocamlc -a</command> (описание опций приведено
	  ниже). Объетные файлы в библиотеке компонуются как обычные
	  файлы <command>.cmo</command> (см. выше) в том же порядке, в
	  каком строился файл <command>.cma</command>. Единственное
	  различие состоитв том, что, если в программе нет ссылок на
	  какой-то объектный файл в библиотеке, то он и не компонуется
	  с программой.</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.c</command>,
	  передаются комплятору С, который генерирует объектный файл
	  <command>.o</command>. Затем этот файл компонуется с
	  программой, если был задан флаг <command>-custom</command>
	  (описание опций см. ниже).</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.o</command>
	  или <command>.a</command> (<command>.obj</command> и
	  <command>.lib</command> под Windows) считаются объекнтыми
	  файлами и библиотеками С. Они передаются компоновщику С при
	  компоновке в режиме <command>-custom</command> (см. описание
	  опций ниже).</para>
	</item>
	<item>
	  <para>Аргументы, заканчивающиеся на <command>.so</command>
	  (<command>.dll</command> под Windows, считаются совместно
	  используемыми библиотеками С. Во время компоновки в них
	  ищутся внешние функции С, на которые есть ссылки в коде
	  Caml, и имена этих библиотек записываются в байткод
	  исполнямых файлов. Система времени исполнения
	  <command>ocamlrun</command> загружает необходимые библиотеки
	  динамически при запуске программы.</para>
	</item>
      </list>
      <para>На стадии компоновки генерируется файл, содержащий
      скомпилированный байткод, пригодный к исполнению интерпретатором
      байкода Objective Caml - программой
      <command>ocamlrun</command>. Для скомпилированного файла
      <command>caml.out</command> команда</para> 
      <listing><![CDATA[ocamlrun caml.out arg1 arg2 ... argn]]></listing>

         <para>выполнит скомпилированный код, содержащийся в файле
         <command>caml.out</command>, передав ему как аргументы
         символьные строки от <command>arg1</command> до
         <command>argn</command>. (Дополнительно см. главу 10.)</para>
         <para>В большинстве систем файл, созданный на стадии
         компоновки можно запускать непосредственно:</para>
         <listing><![CDATA[./caml.out arg1 arg2 ... argn]]></listing>
         <para>Бит исполнения обычно уже установлен, поэтому
         интерпретатор байткода запустится автоматически.</para>
    </section>
    <section name="Опции">
      <para><command>ocamlc</command> разпознает следующие опции
      командной строки:</para>
      <command-option-group>
	<command-option>
	  <c-option>
	    <mc-option>-a</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Создает библиотеку (файл <command>.cma</command>) из
	    объектных файлов <command>.cmo</command>, заданных в
	    командной строке. Имя библиотеки может быть задано с
	    помощью опции <command>-o</command>. Имя по умолчанию -
	    <command>library.cma</command></para>
	    
	    <para>Если в командной строке присутствуют опции
	    <command>-custom</command>, <command>-cclib</command> или
	    <command>-ccopt</command>, то они сохраняются в библиотеке
	    и затем автоматически добавляются при компоновке с этой
	    библиотекой к командной строке в исходном порядке, если
	    только не было задано опции
	    <command>-noautolink</command>.</para>
	    
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-c</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Только компиляция. Фаза компоновки опускается. Файлы с
	      исходным текстом преобразуются в компилированные файлы,
	      но исполняемый файл не создается. Эта опция полезна для
	      раздельной компиляции модулей.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-cc</mc-option>
	    <c-param>ccomp</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Использовать <command>ccomp</command> в качестве
	      компоновщика и компилятора С для компиляции файлов с
	      исходными текстами <command>.c</command> при вызове
	      <command>ocamlc -custom</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-cclib</mc-option>
	    <c-param>-llibname</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Передать компоновщику С опцию
	      <command>-llibname</command> при компиляции в "заказном"
	      режиме (см. описание опции
	      <command>-custom</command>). В результате данная
	      библиотека С будет скомпонована с программой.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-ccopt</mc-option>
	    <c-param>option</c-param>
	  </c-option>
	  <option-description>
	    <para>Передать данную опцию компилятору и компоновщику С
	    при сборке в "заказном" режиме (см. описание опции
	    <command>-custom</command>). Например, при задании
	    <command>-ccopt -Ldir</command> компоновщик С будет искать
	    библиотеки С в каталоге <command>dir</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-custom</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Сборка в "заказном" режиме. В режиме по умолчанию
	    компоновщик создает байткод, предназначенный для
	    исполнения разделямой системой
	    <command>camlrun</command>. В заказном режиме
	    результирующий файл содержит как байткод, так и систему
	    времени выполнения. Он становится больше, но может
	    выполняться сам, даже если команда
	    <command>ocamlrun</command> не установлена. Кроме того,
	    заказной режим позволяет статически компоновать код Caml c
	    пользовательскими функциями на С, как описано в
	    гл. 18. Под Unix не используйте команду
	    <command>strip</command> для файлов, созданных
	    <command>ocamlc -custom</command>. Она удаляет байкод из
	    исполняемого файла.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-dllib</mc-option>
	    <c-param>-llibname</c-param>
	  </c-option>
	  <option-description>
	    <para>Разделяемая библиотека С
	    <command>libname.so</command>
	    (<command>libname.dll</command> под Windows) будет
	    загружена динамически системой времени исполнения
	    <command>ocamlrun</command> при старте программы.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-dllpath</mc-option>
	    <c-param>dir</c-param>
	  </c-option>
	  <option-description>
	    <para>Добавляет каталог <command>dir</command> к пути
	    поиска времени исполнения для разделяемых библиотек С. При
	    компоновке разделяемые библиотеки ищутся в стандартном
	    пути поиска (он соответсвует опции
	    <command>-I</command>). Опция <command>-dllpath</command>
	    просто сохраняет <command>dir</command> в исполняемом
	    файле, где <command>ocamlrun</command> может найти ее и
	    использовать, как описано в разделе 10.3.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-g</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Добавляет отладочную информацию во время компиляции
	    и компоновки. Эта опция необходима для того, чтобы
	    отлажиать программу с помощью
	    <command>ocamldebug</command> (см. гл. 16).</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-i</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Компилятор выводит все определенные имена (а также
	    автоматически распознанные типы или их определения) при
	    компиляции реализации (файл <command>.ml</command>. Это
	    бывает полезно для проверки типов, распознанных
	    компилятором. Кроме того, поскольку вывод соответствует
	    синтаксису интерфейсов, он может помочь явно написать
	    интерфейс (файл <command>.mli</command>) для файла:
	    достаточно перенаправить вывод компилятора в файл
	    <command>.mli</command> и убрать из результата декларации
	    имен, экспорт которых не предполагается.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-I</mc-option>
	    <c-param>directory</c-param>
	  </c-option>
	  <option-description>
	    <para>Добавляет <command>directory</command> к списку
	    каталогов, в которых ищутся компилированные файлы
	    интерфейсов (<command>.mli</command>), компилированные
	    объектные файлы (<command>.cml</command>), библиотеки
	    (<command>.cma</command>) и библиотеки С, заданнын в
	    опциях <command>-cclib -lxxx</command>. По умолчанию в
	    первую очередь файлы ищутся в текущем каталоге, затем - в
	    каталоге стандартной библиотеки. Каталоги, заданные опцией
	    <command>-I</command> учитываются после текущего, в том же
	    порядке, как они заданы в командной строке, но перед
	    стандартной библиотекой.</para> <para>Если каталог
	    начиначается со знака <command>+</command>, то он
	    считается заданным относительно каталога стандартной
	    библиотеки. Например, <command>-I +labltk</command>
	    добавляет к списку поиска подкаталог
	    <command>labltk</command> стандартной библиотеки.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-impl</mc-option>
	    <c-param>filename</c-param>
	  </c-option>
	  <option-description>
	    <para>Компилировать указанный файл как реализацию, даже
	    если его расширение отличается от
	    <command>.ml</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-intf</mc-option>
	    <c-param>filename</c-param>
	  </c-option>
	  <option-description>
	    <para>Компилировать указанный файл как интерфейс, даже
	    если его расширение отличается от
	    <command>.mli</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-linkall</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Принудительно компоновать все модули в
	    библиотеках. При отсутствии этой опции компонуются только
	    модули, на которые есть ссылки. При построении библиотеки
	    (флаг <command>-a</command>) установка флага
	    <command>-linkall</command> приводит к тому, что в
	    последующем при компиляции программ, использующих эту
	    библиотеку, все модули библиотеки будут компоноваться
	    заново.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-make-runtime</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Создает пользовательскую систему времени выполнения
	    (в файле, заданном опцией <command>-o</command>), внедряя
	    объектные файлы С и библитеки, указанные в командной
	    строке. Полученная система может быть использована позднее
	    для запуская исполняемого байткода, скомпилированного
	    командой <command>ocamlc -use-runtime
	    runtime-name</command>. Более подробная информация
	    содержится в разделе 18.1.6.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-noassert</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Отключает проверку утверждений, и утверждения не
	    компилируются. При компоновке ранее скомпилированных
	    файлов этот флаг не работает.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-noautolink</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>При компоновке библиотек <command>.cma</command>
	    опции <command>-custom</command>,
	    <command>-cclib</command> и <command>-ccopt</command>,
	    вероятно хранящиеся в библиотеках (если они были указаны
	    при построении библиотек), игнорируются. Этот флаг
	    полезен, если библиотека содержит неправильные
	    спецификации библиотек или опций С. В этом случае надо
	    указать в командлной строке правильные библиотеки и опции
	    С.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-nolabels</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Игнорировать обязательные метки в типах. В этом
	    случае метки не могут использоваться в приложениях, и
	    порядок аргументов становится строгим.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-o</mc-option>
	    <c-param>exec-file</c-param>
	  </c-option>
	  <option-description>
	    <para>Имя файла, создаваемого компоновщиком. По умолчанию
	    по традициям Unix создается файл
	    <command>a.out</command>. Если используется опция
	    <command>-a</command>, укажите имя библиотеки. Если
	    используется опция <command>-output-obj</command>, укажите
	    имя объектного файла.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-output-obj</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Вместо исполняемого байткода компоновщик создает
	    объектный файл С. Это позволяет при необходимости оформить код
	    Caml как библиотеку С, которую можно вызывать из любой
	    программы С. Более подробно см. раздел 18.7.5. По
	    умолчанию создается файл <command>camlprog.o</command>, но
	    имя может быть задано с помощью опции
	    <command>-o</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-pack</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Создает объектный файл с байткодом
	    (<command>.cmo</command>) и связанный с с ним
	    скомпилированный интерфейс (<command>.cmi</command>),
	    которые включают все объектные файлы, перечисленные в
	    командной строке. Эти файлы становятся субмодулями
	    результирующего файла <command>.cmo</command>. Имя
	    последнего задается опцией
	    <command>-o</command>. Например, </para>

	    <listing>ocamlc -pack -o p.cmo a.cmo b.cmo c.cmo</listing>

	    <para>создает компилированные файлы
	    <command>p.cmo</command> и <command>p.cmi</command>,
	    описывающие единицу компиляции, включающую субмодули A, B
	    и C, соотвествующие содержанию объектных файлов
	    <command>a.cmo</command>, <command>b.cmo</command> и
	    <command>c.cmo</command>. В дальнейшем на них можно
	    ссылаться как <command>P.A</command>,
	    <command>P.B</command> и <command>P.C</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-pp</mc-option>
	    <c-param>command</c-param>
	  </c-option>
	  <option-description>
	    <para>Компилятр вызывает заданную команду
	    <command>command</command> как препроцессор для каждого
	    исходного файла. Вывод команды перенаправляется в
	    промежуточный файл, который и компилируется. Если
	    компиляция проходит без ошибок, по ее завершении
	    промежуточный файл удаляется. Имя файла конструируется на
	    основе имени исходного файла и получает расширение
	    <command>.ppi</command> для интерфейса
	    (<command>.mli</command>) или <command>.ppo</command> для
	    реализации (<command>.ml</command>).</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-principal</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Во время проверки типов компилятор проверяет также
	    информацию о путях, следя чтобы все типы выводились
	    приниципально. Этот флаг обязателен при использовании
	    аргументов с метками и/или полиморфных методов - только
	    так можно быть уверенным, что будущие версии компилятора
	    смогут правильно определить типы даже при изменении
	    внутреннего алгоритма. Программы, допустимые в режиме
	    <command>-principal</command>, допустимы и в режиме по
	    умолчанию с эквивалентными типами, однако бинарные
	    сигнатуры в этом случае другие, поэтому проверка типов
	    работает медленнее. Тем не менее, компиляция с этим флагом
	    может быть полезна, если исходный код еще не
	    опубликован.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-rectypes</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Разрешает во время проверки типа произвольные рекурсивные
	    типы. По умолчанию поддерживаются только рекурсивные типы с рекурсией
	    по типу объекта.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-thread</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Компилирует или компонует многопоточные программы с
	      использованием библиотеки <command>thread</command>, описанной в
	      главе 24. На самом деле, эта опция просто подключает особую версию
	      стандартной библиотеки, безопасную по потокам.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-unsafe</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Отключает проверку границ на массивах и обращении к
	      строкам (конструкции <command>v.(i)</command> и
	      <command>s.[i]</command>). Программы, собранные с этой
	      опцией несколько быстрее, но не являются безопасными:
	      при обращении к элементу за пределами массива или
	      границы строки может произойти все, что угодно.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-use-runtime</mc-option>
	    <c-param>runtime-name</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Создает байткод, исполняемый в пользовательской системе
	      времени исполнения, построенной ранее командой
	      <command>ocamlc -make-runtime
	      runtime-name</command>. Дополнительная информация
	      содержится в разделе 18.1.6.
	    </para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-v</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Выводит номер версии компилятора и путь к стандартной библиотеке,
	      после чего прекращает работу.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-verbose</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Выводит все внешние команды перед их выполнением. В
	    частности это касается компилятора и компоновщика C в
	    режиме <command>-custom</command>. Эта опция полезна при
	    отладке проблем с библиотеками C.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-version</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Выводит номер версии компилятора в краткой форме
	    (например <command>3.06</command>) и прекращает
	    работу.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-w</mc-option>
	    <c-param>warning-list</c-param>
	  </c-option>
	  <option-description>
	    <para>Включает или выключает предупреждения согласно
	    аргументу <command>warning-list</command>. Аргумент
	    является строкой из одной или нескольких букв следующего
	    значения:</para>
	    <dict>
	      <dict-term>A/a</dict-term>
	      <dict-art>
		<para>включить/выключить все предупреждения.</para>
	      </dict-art>
	      <dict-term>C/c</dict-term>
	      <dict-art>
		<para>включить/выключить предупреждения о подозрительных
		комментариях.</para>
	      </dict-art>
	      <dict-term>D/d</dict-term>
	      <dict-art>
		<para>
		  Включить/выключить предупреждения об использовании устаревших
		  функций.
		</para>
	      </dict-art>
	      <dict-term>F/f</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о неполном
		применении функций (например, <command>f x;
		expr</command> при том, что вызов <command>f
		x</command> имеет тип функции).</para>
	      </dict-art>
	      <dict-term>L/l</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о пропуске меток в
		вызовах.</para>
	      </dict-art>
	      <dict-term>M/m</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о переопределенных
		методах.</para>
	      </dict-art>
	      <dict-term>P/p</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о неполных
		совпадениях (пропущенные ветки в поиске по
		образцу).</para>
	      </dict-art>
	      <dict-term>S/s</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о предложениях с типом,
		  отличным от <command>unit</command> (например, <command>expr1;
		    expr2</command>, когда <command>expr1</command> не имеет тип
		  <command>unit</command>.</para>
	      </dict-art>
	      <dict-term>U/u</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о неиспользуемых
		(избыточных) совпадениях с образцом.</para>
	      </dict-art>
	      <dict-term>V/v</dict-term>
	      <dict-art>
		<para>Включить/выключить предупреждения о скрытых переменных
		экземпляра.</para>
	      </dict-art>
	      <dict-term>X/x</dict-term>
	      <dict-art>
		<para>Включить/выключить все остальные предупреждения.</para>
	      </dict-art>
	    </dict>
	    <para>По умолчанию используется установка <command>-w Al</command>
	    (все предупреждения, кроме меток).</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-warn-error</mc-option>
	    <c-param>warning-list</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Все предупреждения, включенные в аргумент
	      <command>warning-list</command> считаются
	      ошибками. Компилятор останавливается на ошибке при
	      появлении одного из предупреждений, вместо того, чтобы
	      продолжать выполнение. <command>warning-list</command>
	      является строкой из одной или нескольких букв того же
	      значения, что и в опции <command>w</command>: прописная
	      буква превращает предупреждение в ошибку, строчная
	      оставляет ее предупреждением. Значение по умолчанию -
	      <command>-warn-error a</command> (все предупреждения не
	      считаются ошибками).
	    </para>
	    <!-- one of (dict list listing para) -->
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-where</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Выводит путь к стандартной библиотеке и прекращает
	    работу.</para>
	  </option-description>
	</command-option>
      </command-option-group>
    </section>
    <section name="Модули и файловая система">
      <para>
	Этот раздел должен прояснить связь между именами модулей,
	соответствующих единицам компиляции, и имен файлов, содержащих
	соответствующие компилированные реализации и интерфейсы.
      </para>
      <para>
	Компилятор всегда выводит имя модуля из имени исходного файла
	без расширения (<command>.ml</command> или
	<command>.mli</command>). Таким образом, он удаляет информацию
	о пути (если она есть) и расширение и преобразует первую букву
	в верхний регистр (поскольку имена модулей должны быть
	капитализированы). Например, файл
	<command>mylib/misc.ml</command> содержит реализацию модуля
	<command>Misc</command>. Другие единицы компиляции могут
	ссылаться на компоненты, определенные в
	<command>mylib/misc.ml</command> по имени типа
	<command>Misc.name</command> или использовать выражение
	<command>open Misc</command>, а затем - неполное имя
	<command>name</command>.
      </para>
      <para>
	Создаваемые компилятором файлы <command>.cmi</command> и
	<command>.cmo</command> имеют те же имена, что и файлы с
	исходным текстом, поскольку компилятор сохраняют для них имя
	модуля, который они описывают (для файлов
	<command>.cmi</command>) или реализуют (для файлов
	<command>.cmo</command>).
      </para>
      <para>
	Встречая ссылку на идентификатор модуля
	<command>Mod</command>, компилятор просматривает путь поиска,
	ища файл <command>mod.cmi</command> (обратите внимание, что
	первая буква строчная), и загружает компилированный интерфейс,
	содержащийся в этом файле. Поэтому крайне не рекомендуется
	переименовывать файлы <command>.cmi</command>: их имена
	всегода должны соотвествовать имени реализованной в них
	единицы компиляции. В противном случае компилятор сообщит об
	ошибке.</para>
      <para>
	Что же касается файлов с байткодом (<command>.cmo</command>),
	то их можно переименовывать сколько угодно. Дело в том, что
	компоновщик не ищет файл <command>.cmo</command>, содержащий
	реализацию модуля: считатется, что пользователь сам должен
	предоставить ему список файлов <command>.cmo</command>.
      </para>
    </section>
    <section name="Распространенные ошибки">
      <para>В этом разделе описываются наиболее распространенные
      сообщения об ошибках.</para>
      <dict>
	<dict-term>Cannot find file filename</dict-term>
	<dict-art>
	  <para>
	    Указанный файл не обнаружен в текущем каталоге или
	    каталогах, входящих в пусть
	    поиска. <command>filename</command> является либо
	    компилированным интерфейсом (<command>.cmi</command>),
	    либо байткодом (<command>.cmo</command>). Если
	    <command>filename</command> представлен в формате
	    <command>mod.cmi</command>, то это означает, что
	    компилированный файл ссылается на модуль
	    <command>mod</command>, который еще не
	    скомпилирован. Чтобы исправить эту ошибку, достаточно
	    скомпилировать предварительно файл
	    <command>mod.mli</command> или <command>mod.ml</command>.
	  </para>
	  <para>
	    Если <command>filename</command> имеет формат
	    <command>mod.cmo</command>, то это означает, что
	    предпринята попытка скомнововать еще не созданный файл с
	    байткодом. В данном случае надо предварительно
	    скомпилировать файл <command>mod.ml</command>. 
	  </para>
	  <para>
	    Если исходные тексты программы размещены в нескольких
	    каталогах, эта ошибка может означать, что каталоги не
	    включены в путь поиска, и надо исправить опции
	    <command>-I</command> командной строки.
	  </para>
	</dict-art>
	<dict-term>Corrupted compiled interface filename</dict-term>
	<dict-art>
	  <para>
	    Эта ошибка возникает, когда компилятор пытается прочесть
	    скомпилированный файл интерфейса (<command>.cmi</command>)
	    с неверной структурой. Она означает, что произошла ошибка
	    при записи файла - либо диск был заполнен, либо процесс
	    компиляции прерван во время записи файла и т.д. Кроме
	    того, ошибка может возникать, если файл
	    <command>.cmi</command> был модифицирован после его
	    создания. Для исправления следует удалить файл
	    <command>.cmi</command> и построить его заново.
	  </para>
	</dict-art>
	<dict-term>This expression has type t1, but is used with type
	  t2</dict-term>
	<dict-art>
	  <para>
	    Это одна из наиболее распространенных  ошибок. Тип
	    <command>t1</command> выводится для выражения (в сообщении
	    об ошибке показывается эта часть программы) из самого
	    выражения. Тип <command>t2</command> ожидается, исходя из
	    контекста выражения. Он выводится из того, как значение
	    выражения используется в программе далее. Если
	    <command>t1</command> и <command>t2</command>
	    несовместимы, возникает ошибка.
	  </para>
	  <para>
	    Иногды бывает сложно понять, почему типы
	    несовместимы. Например, компилятор может сообщить, что 
	    "выражение типа <command>foo</command> не может
	    использоваться с типом
	    <command>foo</command>", хотя два типа
	    <command>foo</command> явно должны быть совместимы. Но это
	    не всегда так. Два конструктора типов могут иметь общее
	    имя, но на самом деле представлять разные типы. Такое
	    случается при переопределении конструктора. Например:
	  </para>
	  <listing>
	    <![CDATA[
type foo = A | B
let f = function A -> 0 | B -> 1
type foo = C | D
f C]]>
	  </listing>
	  <para>
	    При компиляции такого кода появится сообщение об ошибке
	    "Выражение <command>c</command> типа
	    <command>foo</command> не может использоваться с типом
	    <command>foo</command>".
	  </para>
	</dict-art>
	<dict-term>The type of this expression, t, contains type
	  variables that cannot be generalized</dict-term> 
	<dict-art>
	  <para>
	    Переменные типа (<command>'a, 'b, ...</command>) в типе
	    <command>t</command> могут быть в двух состояниях:
	    обобщенные (в этом случае тип <command>t</command>
	    пригоден для всех возможных инстанциаций переменных) и не
	    обобщенные (в этом случае тип <command>t</command>
	    пригоден только для одной инстанциации переменных). В
	    связывании <command>let name = expr</command> система
	    проверки типов как правило обобщает все переменные типа,
	    возможные в типе <command>expr</command>. Однако, в
	    совокупности с полиморфическими изменяемыми структурами
	    данных это приводит к уязвимости программ (исполнение
	    правильной программ заканчивается ошибками). Поэтому
	    обобщение производится для связываний
	    <command>let</command> только в том случае, если
	    выражение <command>expr</command> принадлежит к классу
	    "синтаксических значений", включающему константы,
	    идентификаторы, функции, кортежи синтаксических значений и
	    т.д.  Во всех остальных случаях (например,
	    <command>expr</command> является приложением функции)
	    может создаваться полиморфная изменяемая структура, и
	    обобщение выключается.
	  </para>
	  <para>
	    Внутри данной структуры или единицы компиляции (содержимое
	    файла <command>.ml</command> или интерактивной сессии)
	    необобщенные переменные типа не несут никаких проблем, но
	    в сигнатурах или компилированных интерфейсах их быть не
	    должно, поскольку позднее они могут быть использованы
	    неправильно. Поэтому компилятор сообщает об ошибке, когда
	    структура или единица компиляции определяет значение
	    <command>name</command>, тип которой содержит необобщенные
	    переменные типа. Есть два способа исправить эту ошибку:
	  </para>
	  <list type="plain">
	    <item>
	      <para>Можно добавить в файл <command>.mli</command>
		ограничение типа. В результате тип станет мономорфным
		(без переменных типа). Например, вместо</para>
	      <listing>
<![CDATA[let sort_int_list = Sort.list (<)
(* выводится тип 'a list -> 'a list, причем 'a не обобщается *)]]></listing>
	      <para>пишите</para>
	      <listing>let sort_int_list = (Sort.list (&lt;) : int list -&gt; int list);;</listing>
	    </item>
	    <item>
	      <para>Если необходим именно полиморфный тип,
		определяющее его выражение можно преобразовать в
		функцию, добавив параметр. Например, вместо</para>
	      <listing>
<![CDATA[let map_length = List.map Array.length
(* выводится тип 'a list -> int list, причем 'a не обобщается *)]]></listing>
	      <para>пишите</para>
	      <listing>let map_length lv = List.map Array.length lv</listing> 
	    </item>
	  </list>
	</dict-art>
	<dict-term>Reference to undefined global <emph>mod</emph></dict-term>
	<dict-art>
		<para>
			Эта ошибка появляется при ссылке на неполный или неправильно упорядоченный
			набор файлов. Возможно, в командной строке не указана реализация
			для единицы компиляции <command>mod</command>(как правило, файл
			<command>mod.cmo</command> или содержащая его библиотека). Для исправления
			достаточно указать в командной строке недостающий файл <command>.ml</command>
			или <command>.cmo</command>. Кроме того, реализация модуля <command>mod</command>
			может находиться в командной строке после модуля, ссылающегося на нее, а должно
			быть наоборот. В этом случае надо изменить порядок модулей.
		</para>
		<para>
			Разумеется, при взаимно рекурсивных ссылках в модулях (например, функция
			<command>Mod1.f</command> вызывает функцию <command>Mod2.g</command>, а та
			вызывает <command>Mod1.f</command>) эта ошибка будет проявляться всегда. В этом
			случае исходные файлы не будут скомпилированы, как не переставляй их в
			командной строке. Возможные решения:
		</para>
		<list type="plain">
			<item>
				<para>Поместить <command>f</command> и <command>g</command> в один модуль.</para>
			</item>
			<item>
				<para>Параметризовать одну функцию другой. То есть вместо:</para>
				<listing><![CDATA[mod1.ml:    let f x = ... Mod2.g ...
mod2.ml:    let g y = ... Mod1.f ...]]></listing>
				<para>писать:</para>
				<listing><![CDATA[mod1.ml:    let f g x = ... g ...
mod2.ml:    let rec g y = ... Mod1.f g ...]]></listing>
				<para>и передавать компоновщику сначала <command>mod1.cmo</command>,
				затем <command>mod2.cmo</command>.</para>
			</item>
			<item>
				<para>Одну из двух функций можно поместить в ссылку, например так</para>
				<listing><![CDATA[mod1.ml:    let forward_g =
                ref((fun x -> failwith "forward_g") : <type>)
            let f x = ... !forward_g ...
mod2.ml:    let g y = ... Mod1.f ...
            let _ = Mod1.forward_g := g]]></listing>
				<para>Впрочем, если <command>g</command> полиморфна, это работать не будет.</para>
			</item>
		</list>
	</dict-art>
	<dict-term>The external function <emph>f</emph> is not available</dict-term>
	<dict-art>
		<para>
			Эта ошибка появляется при попытке компиляции кола, вызывающего
			с внешнюю функцию на языке С. В гл. 18 объясняется, что такой код
			должен компоноваться с библиотекой С, содержащей функцию <command>f</command>.
			Если библиотека не разделяемая (DLL), компоновка должна проходить в &quot;заказном
			режиме&quot; Решение: указать необходимую библиотеку С и, возможно, ключ
			<command>-custom</command>.
		</para>
	</dict-art>
      </dict>
    </section>
  </main-matters>
</chapter>
