<?xml version="1.0" encoding="utf-8"?>
<!-- <!DOCTYPE chapter SYSTEM "./core.dtd"> -->
<chapter name="Интерактивная система (ocaml)" number="9">
  <main-matters>
    <section>
      <para>В этой главе описывается интерактивная система Objective
	Caml, преднзначенная для использования языка в циле
	чтения-компиляции-вызова. В этом режиме система считывает фразы
	Caml из ввода, проверяет тип, компилирует и выполняет и, а затем
	выводит распознанный тип и значение результата, если он
	есть. Перед чтением каждой фразы система выводит символ
	<command>#</command> (диез).</para> <para>Ввод может занимать
	несколько строк. Он заканчивается <command>;;</command> (двумя
	точками с запятыми) и состоит из одной или нескольких фраз со
	следующим синтаксисом:</para>
      <bnf>
	<term>toplevel-input</term>
	<def>
	  <repetitive>
	    <term>toplevel-phrase</term>
	  </repetitive>
	  <value>;;</value>
	</def>
      </bnf>
      <bnf>
	<term>toplevel-phrase</term>
	<def>
	  <or multiline="1">
	    <choice>
	      <term>definition</term>
	    </choice>
	    <choice>
	      <term>expr</term>
	    </choice>
	    <choice>
	      <value>#</value>
	      <term>ident</term>
	      <term>directive-argument</term>
	    </choice>
	  </or>
	</def>
      </bnf>
      <bnf>
	<term>definition</term>
	<def>
	  <or multiline="1">
	    <choice>
	      <value>let</value>
	      <optional>
		<value>rec</value>
	      </optional>
	      <term>let-binding</term>
	      <repetitive>
		<value>and</value>
		<term>let-binding</term>
	      </repetitive>
	    </choice>
	    <choice>
	      <term>type-definition</term>
	    </choice>
	    <choice>
	      <term>exception-definition</term>
	    </choice>
	    <choice>
	      <value>module</value>
	      <term>module-name</term>
	      <group>
		<value>:</value>
		<term>module-type</term>
	      </group>
	      <value>=</value>
	      <term>module-expr</term>
	    </choice>
	    <choice>
	      <value>module type</value>
	      <term>modtype-name</term>
	      <value>=</value>
	      <term>module-type</term>
	    </choice>
	    <choice>
	      <value>open</value>
	      <term>module-path</term>
	    </choice>
	    <choice>
	      <value>external</value>
	      <term>value-name</term>
	      <value>:</value>
	      <term>typexpr</term><value>=</value><term>external-decalaration</term>
	    </choice>
	    <choice><term>type-definition</term></choice>
	    <choice><term>exception-definition</term></choice>
	  </or>
	</def>
      </bnf>
      <bnf>
	<term>directive-argument</term>
	<def>
	  <or multiline="1">
	    <choice><term>nothing</term></choice>
	    <choice><term>string-literal</term></choice>
	    <choice><term>integer-literal</term></choice>
	    <choice><term>value-path</term></choice>
	  </or>
	</def>
    </bnf>
    <para>
    	Фраза состоит из определений, подобных тем, что включаются в
    	реализации единиц компиляции, или в выражениях модулей
    	<keyword>struct ... end</keyword>. Определение связывает имена
    	значений, имена типов, исключения, имена модулей и имена типов
    	модулей. Интерактивная система осуществляет само связывание и
    	выводит определенные типы и значения, если они есть.
    </para>
    <para>
    	Кроме того, фраза может содержать директиву
    	<keyword>open</keyword> (см. раздел 6.11) или выражение
    	(см. раздел 6.7). Выражение вычисляется без связывания, и
    	система выводит его результат.
    </para>
    <para>
    	Наконец, фраза может включать директивы интерактивной системы,
    	начинающиеся со знака <keyword>#</keyword>. Они управляют
    	работой интерактивной системы и описаны ниже, в разделе 9.2.
    </para>
    <dict>
      <dict-term>UNIX</dict-term>
      <dict-art>
	<para>Интерактивная система запускается командой
    		<command>ocaml</command>:
    	</para>
	<listing><![CDATA[ocaml options objects # интерактивный режим
ocaml options objects scriptfile # пакетный режим]]></listing>

	<para>Опции описаны ниже. Параметр <command>objects</command>
	включает имена файлов с расширениями <command>.cmo</command>
	или <command>.cma</command> - интерпретатор загружает их сразу
	после установки опций. Параметр <command>scriptfile</command>
	- это любое имя файла без расширения <command>.cmo</command>
	или <command>.cma</command>.
	</para>

	<para> Если параметр <command>scriptfile</command> отсутствует
	в командной строке, система запускается в интерактивном режиме
	- фразы читаются из стандартного ввода, результаты выводятся в
	стандартный вывод, ошибки - в стандратный поток ошибок. Знак
	конца файла в стандартном вводе останавливает
	<command>ocaml</command> (см. также директиву
	<command>#quit</command> в разделе 9.2).
	</para>
	<para>При запуске, но до чтения первой фразы, из текущего
	каталога считывается файл <command>.ocamlinit</command> (если
	он есть). Его содержимое читается как последовательность фраз
	OCaml и выполняеся как в при использовании директивы
	<command>#use</command>. При вычислении эти фразы не
	выводятся.</para>
	
	<para>Интерактивная система не редактирует строки, однако ее
	легко можно использовать в комбинации с внешним редактором
	строк типа <command>fep</command> командой <command>fep -emacs
	ocaml</command> или <command>fep -vim ocaml</command>. Кроме
	того, <command>ocaml</command> может запускаться в GNU Emacs,
	что позволяет использовать все возможности этого редактора
	(см. подкаталог <command>emacs</command> в дистрибутиве
	Objective Caml).</para>

	<para>
	  Анализ, компиляция и выполнение текущей фразы в любой момент
	  могут быть прерваны клавишами <command>ctrl-c</command>
	  (или, если точнее отправкой сигнала
	  <keyword>sigintr</keyword> процессу
	  <command>ocaml</command>). Интерактивная система в этом
	  случае немедленно возвращается к приглашению
	  <command>#</command>.
        </para>

	  <para>
	    Если в командной строке задан параметр
	    <command>scriptfile</command>, интерактивная система
	    переходит в  режим сценария: содержимое файла считывается
	    как последовательность фраз Objective Caml и выполняется
	    как при использовании директивы
	    <command>#use</command>(раздел 9.2).  Результаты
	    компиляции не выводятся. По окончании файла работа команды
	    <command>caml</command> завершается. Команды из
	    стандартного ввода не
	    читаются. <keyword>Sys.argv</keyword> модифицируется,
	    причем все параметры Objective Caml игнорируются, а в
	    <keyword>Sys.argv.(0)</keyword> помещается имя файла сценария.</para>
	  
	  <para>
	    Если первая строка файла сценария начинается с символов
	    <keyword>#!</keyword>, она пропускается. Таким образом,
	    теоретически возможно делать файлы сценариев исполняемыми
	    и помещать в первую строку что-то вроде <keyword>#!
	    /usr/local/bin/ocaml</keyword>. Однако в большинстве
	    инсталляций команда <command>ocaml</command> сама является
	    сценарием командной оболочки, а операционные системы Unix
	    как правило не умеют работать с вложенными сценариями.
	  </para>

    	</dict-art>
	<dict-term>Windows</dict-term>
	
	<dict-art>
	  <para>Кроме команды текстового режима
	  <command>ocaml</command>, которая работает точно так же, как
	  и под Unix, существует графический интерфейс интерактивной
	  системы. Он называется <command>ocamlwin.exe</command> и
	  может запускаться как из файлового менеджера, так и из
	  оболочки Windows.</para>
	  
	  <para>Окно "Terminal" разделено на две области. В нижней
	  вводятся и редактируются фразы, верхняя содержит копию ввода
	  и вывод интерпретатора. Клавиша "Return" пересылает ввод
	  интерпретатору, клавиша "Enter" просто добавляет символ
	  новой строки (назначение клавиш конфигурируется в меню
	  "Preferences").</para>

	  <para>Содержимое окна ввода может быть изменено в любой
	  момент через стандартный интерфейс Windows. В отдельном окне
	  показаны ранее введенные фразы.</para>

	  <para>Для выхода из приложения <command>Ocamlwin</command>
	  используется либо пункт меню <command>File|Exit</command>,
	    либо функция <keyword>quit</keyword>, описанная ниже.
	  </para>
	  <para>
	  Анализ, компиляция и выполнение текущей фразы в любой момент
	  могут быть прерваны командой меню <command>Interrupt
	  Objective Caml</command>. Интерактивная система в этом
	  случае немедленно возвращается к приглашению
	  <command>#</command>.
	  </para>
	</dict-art>
    </dict>
    </section>
    <section name="Опции">
      <para><command>ocaml</command> распознает следующие опции командной
      строки:</para>
      
      <command-option-group>
	<command-option>
	  <c-option>
	    <mc-option>-I</mc-option>
	    <c-param>directory</c-param>
	  </c-option>
	  <option-description>
	    <para>Добавяет указанную директорию к списку директорий, в
	    которых ищутся исходные тексты и компилированные файлы. По
	    умолчанию сначала используется текущий каталог, затем
	    стандартная библиотека. Директории, заданные этой опцией
	    помещаются в список поиска после текущего каталога, в том
	    порядке, как они указаны, но до стандартной
	    библиотеки.</para>
	    
	    <para>Если перед <command>directory</command> стоит знак
	    <command>+</command>, путь берется относительно
	    стандартной библоитеки. Например, <command>-I
	    +labltk</command> добавит к пути поиска подкаталог
	    <command>labltk</command> каталога стандартной
	    библиотеки.</para>
	    
	    <para>Кроме того, каталоги можно добавить к пути поиска
	    непосредственно после запуска интрепретатора директивой
	    <keyword>#directory</keyword>.</para>
	    
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-nolabels</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Игнорировать обязательные метки в типах. В этом
	    случае метки не могут использоваться в приложениях, и
	    порядок аргументов становится строгим.
	    </para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-principal</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Во время проверки типов компилятор проверяет также
	    информацию о путях, следя чтобы все типы выводились
	    приниципально, Программы, допустимые в режиме
	    <command>-principal</command>, допустимы и в режиме по
	    умолчанию с эквивалентными типами.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-rectypes</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Разрешает во время проверки типа произвольные рекурсивные
	    типы. По умолчанию поддерживаются только рекурсивные типы с рекурсией
	    по типу объекта.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-unsafe</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>См. описание соответствующей опции <command>ocamlc</command> в
	      гл. 8. Отключает проверку границ на массивах и обращении к строкам
	      (конструкции <command>v.(i)</command> и
	      <command>s.[i]</command>). Программы, собранные с этой опцией
	      несколько быстрее, но не являются безопасными: при обращении к
	      элементу за пределами массива или границы строки может произойти
	      все, что угодно.
	    </para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-w</mc-option>
	    <c-param>warning-list</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Включает или выключает предупреждение в соответствие со значением
	      аргумента <command>warning-list</command>.
	    </para>
	  </option-description>
	</command-option>
      </command-option-group>
      <dict>
	<dict-term>Unix</dict-term>
	<dict-art>
	  <para>Проверяются также следующие переменные среды:</para>
	  <dict>
	    <dict-term>LC_CTYPE</dict-term>
	    <dict-art>
	      <para>Если эта переменная установлена в значение
	      <command>iso8859-1</command>, знаки с акцентам из набора Latin-1 в
	      строках и символьных литералах выводятся как есть. В противном
	      случае они печатаются десятичными контрольными последовательностями
	      (вида \ddd).</para>
	    </dict-art>
	    <dict-term>TERM</dict-term>
	    <dict-art>
	      <para>При выводе сообщений об ошибках интерпретатор пытается
	      визуально подчеркивать место обнаружения ошибки. Он проверяет
		переменную окружения <command>TERM</command>, чтобы определить
		тип терминала и выяснить его возможности в базе данных
	      терминалов.</para>
	    </dict-art>
	  </dict>
	</dict-art>
      </dict>
    </section>
    <section name="Директивы">
      <para>Ниже перечислены директивы, которые позволяют
      контролировать работу интерпретатора, загружать в память файлы и
      отслеживать ход выполнения программы.</para>

      <para>Обратите внимание: все директивы начинаются со знака
      <keyword>#</keyword> (диез). Он должен печататься перед
      директивой, но его не следует путать с приглашением
      интрепретатора. Если, например, напечатать
      <keyword>#quit;;</keyword>, работа интерпретатора завершится,
      ввод же <keyword>quit;;</keyword> приведет лишь к ошибке
      "unbound value <keyword>quit</keyword>".</para>
      <command-option-group>
	<command-option>
	  <c-option>
	    <mc-option>#quit;;</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Завершает работу интерпретатора
	    <command>ocaml</command>.
	    </para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#labels</mc-option>
	    <c-param>bool;;</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Игнорирует метки в типах функций, если аргумент
	      установлен в <emph>false</emph>, либо переключает в
	      режим по умолчанию (коммутирующий), если аргемент
	      установлен в <emph>true</emph>.
	    </para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>warnings</mc-option>
	    <c-param>"warnings-list";;</c-param>
	  </c-option>
	  <option-description>
	    <para>Включает или выключает предупреждения согласно
	      значению аргумента.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#directory</mc-option>
	    <c-param>"dir-name";;</c-param>
	  </c-option>
	  <option-description>
	    <para>Добавляет указанный каталог к списку директорий, в
	      которых ищутся исходные тексты и компилированные
	      файлы.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#cd</mc-option>
	    <c-param>"dir-name";;</c-param>
	  </c-option>
	  <option-description>
	    <para>Изменяет текущий каталог.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#load</mc-option>
	    <c-param>"file-name";;</c-param>
	  </c-option>
	  <option-description>
	    <para>Загружает в память байткод из объектного файла
	      (<command>.cmo</command>), созданного компилятором
	      <command>ocamlc</command>.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#use</mc-option>
	    <c-param>"file-name";;</c-param>
	  </c-option>
	  <option-description>
	    <para>
	      Читает, компилирует и выполняет фразы из указанного
	      файла с исходным кодом. Включение буквальное: фразы
	      обрабатываются так, будто они вводятся со стандатного
	      ввода. Чтени файла останавливается при первой же
	      ошибке.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#install-printer</mc-option>
	    <c-param>printer-name;;</c-param>
	  </c-option>
	  <option-description>
	    <para>Эта директива регистрирует функцию
	      <emph>printer-name</emph> в качестве принтера для
	      значений, типы которых совпадают с типом аргумента
	      функции. Иными словами, интерактивная система будет
	      вызывать <emph>printer-name</emph>, как только ей
	      потребуется вывести подобное значение.</para>
	    <para>Функция должна иметь тип <value>Format.formatter
		-&gt;</value><term>t</term><value>-&gt; unit</value>,
	      где <term>t</term> - тип значения, и выводить строковое
	      представление значения типа <term>t</term> на заданном
	      форматировщике с помощью функций библиотеки
	      <keyword>Format</keyword>. Из соображений обратной
	      совместимости функция должна также иметь тип
	      <term>t</term><value>-&gt; unit</value> и предоставлять
	      вывод для стандартного форматировщика, но такое
	      использование считается устаревшим.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#remove-printer</mc-option>
	    <c-param>printer-name;;</c-param>
	  </c-option>
	  <option-description>
	    <para>Удаляет указанную функцию из таблицы
	      принтеров.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#trace</mc-option>
	    <c-param>function-name;;</c-param>
	  </c-option>
	  <option-description>
	    <para>После выполнения этой директивы все вызовы функции
	      <emph>function-name</emph> будут "трассироваться" -
	      аргументы и результаты, а также исключения, возбужденные
	      либо самой функией, либо вызываемой ей функцией,
	      печатаются при каждом ее вызове. Если функция является
	      производной, каждый аргумент печатается так, будто он
	      передается функции.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#untrace</mc-option>
	    <c-param>function-name;;</c-param>
	  </c-option>
	  <option-description>
	    <para>Останавливает трассировку указанной функции.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#untrace_all;;</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Останавливает трассировку всех функций.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#print_depth</mc-option>
	    <c-param>n;;</c-param>
	  </c-option>
	  <option-description>
	    <para>Ограничивает вывод значений максимальной глубиной
	      <emph>n</emph>. Части значений с глубиной, превосходящей
	      <emph>n</emph> выводятся как <keyword>...</keyword>
	      (многоточие).</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>#print_length</mc-option>
	    <c-param>n;;</c-param>
	  </c-option>
	  <option-description>
	    <para>Ограничивает количество узлов выводимых значений
	      максимальным числом <emph>n</emph>. Оставшиеся части
	      выводятся как <keyword>...</keyword>
	      (многоточие).</para>
	  </option-description>
	</command-option>
      </command-option-group>
    </section>
    <section name="Интерпретатор и система модулей">
      <para>Фразы в интерактивной системе могут ссылаться на
	идентификаторы, определенные в единицах компиляции точно так
	же, как и в отдельных единицах компиляции - либо по полным
	именам (<keyword>Modulename.localname</keyword>), либо с
	помощью конструкции <keyword>open</keyword> и неполного имени
	(см. раздел 6.3).</para>
      <para>Однако реализация единицы, на имена котрой предполагается
	ссылаться уже должна быть загружена в память. При запуске
	интерактивная система включает все реализации модулей
	стандартной библиотеки, а реализации пользовательскиз модулей
	загружаются директивой <keyword>#load</keyword>, описанной
	выше. Ссылка на единицу, реализации которой не найдено,
	приведет к ошибке "Reference to undefined global
	`...'".</para>
      <para>Обратите внимание, что фраза <keyword>open</keyword>
	<emph>mod</emph> всего лишь обеспечивает доступ к
	компилированному интерфейсу (<command>.cmi</command>) модуля
	<emph>mod</emph>, не загружая его реализации и не сообщая об
	ошибке, если она не будет найдена. Ошибка "reference to
	undefined global <emph>mod</emph>" возникает только в том
	случает, если выполняется значение или определение модуля,
	ссылающегося на <emph>mod</emph>.</para>
    </section>
    <section name="Распространенные ошибки">
      <para>В этом разделе описываются наиболее распространенные
	сообщения об ошибках.</para>
      <dict>
	<dict-term>Cannot find file filename</dict-term>
	<dict-art>
	  <para>
	    Указанный файл не обнаружен в текущем каталоге или
	    каталогах, входящих в пусть поиска.</para>
	  <para>Если <command>filename</command> представлен в формате
	    <command>mod.cmi</command>, то это означает, что
	    обнаружена ссылка на модуль <command>mod</command>,
	    который еще не скомпилирован. Чтобы исправить эту ошибку,
	    достаточно скомпилировать предварительно файл
	    <command>mod.mli</command> или
	    <command>mod.ml</command>.</para>
	  <para>Если <command>filename</command> представлен в формате
	    <command>mod.cmo</command>, то это означает, что
	    обнаружена попытка загрузить директивой
	    <keyword>#load</keyword> несуществующий файл с байткодом.
	    Чтобы исправить ошибку, надо скомпилировать файл
	    <command>mod.ml</command>.</para>
	  <para>Если программа включает несколько каталогов, они могут
	    не попасть в пусть поиска. В таком случае их надо добавить
	    директивой <keyword>#directory</keyword>.</para>
	</dict-art>
	<dict-term>This expression has type
	  <emph>t</emph><index ind="1"/>, but is used with type
	  <emph>t</emph><index ind="2"/></dict-term>
	<dict-art>
	  <para>См. раздел 8.4.</para>
	</dict-art>
	<dict-term>
	  Reference to undefined global <emph>mod</emph></dict-term>
	<dict-art>
	  <para>Реализаци модуля не загружена директивой <keyword>#load</keyword>. См. раздел 9.3.</para>
	</dict-art>
      </dict>
    </section>
    <section name="Заказные интерпретаторы">
      <para>Команда <command>ocamlmktop</command> создает
	интерпретаторы Objective Caml, котрые загружат при запуске
	пользовательский код.</para>
      <para>Она принимает в качестве аргумента набор файлов
	<command>.cmo</command> и <command>.cma</command> и компонует
	их с объектными файлами, реализующими интреактивную систему
	Objective Caml. Типичный пример:</para>
      <listing><![CDATA[ocamlmktop -o mytoplevel foo.cmo bar.cmo gee.cmo]]></listing>
      <para>Здесь создается файл с байткодом <command>mytoplevel</command>, включающий интерактивную систему Objective Caml и код из трех файлов <command>.cmo</command>. Этот файл уже является исполняемым и запускается так:</para>
      <listing><![CDATA[./mytoplevel]]></listing>
      <para>В результате загружается обычный интерпретор, однако код из <command>foo.cmo</command>, <command>bar.cmo</command> и <command>gee.cmo</command> уже находится в памяти, словно были введены директивы</para>
      <listing><![CDATA[#load "foo.cmo";;
#load "bar.cmo";;
#load "gee.cmo";;]]></listing>
      <para>Впрочем, модули <keyword>Foo</keyword>, <keyword>Bar</keyword> и <keyword>Gee</keyword> не открыты, поэтому надо ввести</para>
      <listing><![CDATA[open Foo;;]]></listing>
      <para>если это потребуется.</para>
    </section>
    <section name="Опции ocamlmktop">
      <para>Команда <command>ocamlmktop</command> допускает следующие опции командной строки:</para>
      <command-option-group>
	<command-option>
	  <c-option>
	    <mc-option>-cclib</mc-option>
	    <c-param>libname</c-param>
	  </c-option>
	  <option-description>
	    <para>Передает компоновщику С опцию
	      <command>-llibname</command> при компоновке в "заказном"
	      режиме. См. описание соответствующей опции
	      <command>ocamlc</command> в гл. 8.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-ccopt</mc-option>
	    <c-param>option</c-param>
	  </c-option>
	  <option-description>
	    <para>Передает указанные опции компилятору и компоновщику
	      С при компоновке в "заказном" режиме. См. описание
	      соответствующей опции <command>ocamlc</command> в гл.
	      8.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-custom</mc-option>
	    <c-param></c-param>
	  </c-option>
	  <option-description>
	    <para>Компоновка в "заказном" режиме. См. описание
	      соответствующей опции <command>ocamlc</command> в гл.
	      8.</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-I</mc-option>
	    <c-param>directory</c-param>
	  </c-option>
	  <option-description>
	    <para>Добавяет указанную директорию к списку директорий, в
	      которых ищутся компилированные файлы
	      (<command>.cmo</command> и
	      <command>.cma</command>).</para>
	  </option-description>
	</command-option>
	<command-option>
	  <c-option>
	    <mc-option>-o</mc-option>
	    <c-param>exec-file</c-param>
	  </c-option>
	  <option-description>
	    <para>Задает имя файла интерпретатора, создаваемого компоновщиком. По умолчанию это <command>a.out</command>.</para>
	  </option-description>
	</command-option>
      </command-option-group>
    </section>
  </main-matters>
</chapter>
